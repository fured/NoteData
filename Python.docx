python是面向对象的
1、版本
	目前有python2和python3的版本，最坑的一点是python2和python3不兼容，所以在python2上可以运行的程序，在python3上可能会出错。
	本文档使用的是python3。具体的版本是：python 3.4.3
2、运行模式
	交互式：Python独有的模式，直接在shell命令行下输入：python3，即可进入交互模式。（输入python，进入的是Python2版本的交互模式）。交互模式下，Python解释器是打开的。
	脚本模式：将python语句放入以.py结尾的文件中，执行的时候去调用Python的解释器即可。
3、语法规则
	采取缩进的方法。C语言中的代码块是以{}括起来的，而python中的代码块是，：号后面相同缩进的行，是一个代码块。
	所以，为了使得python的语法统一，规定使用4个空格代表一级缩进，Tab可以设置成4个空格。
4、基本数据类型
	相对于C语言，python的数据类型简单地多。因为C是较底层的语言，直接和硬件打交道，数据类型规定比较苛刻。而Pthon是高度抽象底层的很高级的语言，所以数据类型规则更简单。
	由于C语言是需要提前编译，而Python是解释性的语言，在执行的时候再去一句一句翻译成机器指令；再者C语言更底层，所以C语言的执行速度远高于Python等更高级的语言。所以设计游戏一般使用C。
	（1）整数
		可以表示任意大小的整数，包括负整数。如：1、-20、0、3456
		可以使用十进制、八进制、十六进制，如：16进制：0xff00
	（2）浮点数
		即小数
		表示方法：普通写法（如：-22.34、2.3等）；科学计数法（如：1.23e4、12.3e-5等，e表示10）
	（3）字符串str
		C语言中字符串都是以””括起来的，而python中，“”和‘ ’都行。为了统一一点，还是使用”“。
		C语言中字符串是字符数组可以想数组一样去处理字符串中的某一个字符，Python也一样，但是不同的是C语言字符串是以‘\0’结尾的，而Python没有这一规定。
		python中的转义字符和C语言中大多相同：
		\' 单引号
		\”    双引号		
		\n   换行符		
		\t    横向制表符
		\\    反斜杠
		Python还提供了：r”表示“中的字符默认不转义，原样输出，如：print(r”\\\t\n”);
		python三引号的用法：‘’‘ ’‘’
			允许一个字符串跨多行，并且字符串中可以有换行符等特殊字符；
	（4）布尔值
		只有True和False。
	（5）空值
		表示方法：None，不是0，0是有意义的，而None是一个特殊的空值。
	注：类型转化
		birth = input()
		print(birth + 100)
		程序会报错，因为input()函数返回的类型是str型，str型不能和整数运算，所以需要类型转换，使用int（birth）。
5、变量
	所谓变量，即它的值是可以改变的，变量在程序中用变量名表示。
	C语言中，变量必须进行声明，声明它的类型；而Python中变量不需要声明，任何类型的数据都可以赋给同一变量。这种变量类型不固定的语言称为动态语言，而C、java都属于静态语言。
	由于这种性质，出现了和C语言不同的地方，C语言中：int a = 1；将在内存中分出一块int大小的空间，去存1这个数字，而变量名a在编译的时候会编译成这个空间的首地址。
	python中，a = “asd” 首先会在内存中分出一块内存存放“asd”这个字符串，然后会再为a分出一块内存，用于存放“asd”字符串的地址。（可以理解成C语言的指针）。
6、常量
	所谓常量，就是不可以改变的变量。Python中没有真正的常量。
	Python中用全部大写的变量名表示常量。实际上它仍是个变量，可以去改动，但是为了程序需求，我们使用全部大写的规定去表示它，不可以修改。
7、除法
	C语言中，由于有自动类型转换，所以使用除法时，会根据操作数的类型去决定结果的类型。而Python中变量是没有类型的，所以需要使用除法符号去规定。
	/ 除号，的计算结果是浮点型的，就算整除，结果也是浮点型
	// 除号，的结果永远是整数，只取结果的整数部分。
8、编码问题
	(1)编码涉及很多：存储的时候需要编码、显示的时候需要编码、输入的时候需要编码等，反正只要是字符和机器打交道，都要使用特殊的编码方式去编成二进制。
	对英文来说，没有编码的问题，因为计算机发明的时候就将ASCII码（一个字符用一个字节表示）编到了计算机中，全世界都一样。而汉字就不行了，所以有了GB2312编码，用于将汉字编码。但是不同的语言如韩文、日文等，都会有不同的编码，这样会造成乱码。
	所以，出现了Unicode编码。Unicode把所有的语言都统一到了一套编码中。
	所有的字符（不论是什么语言），在内存中使用时，都是以unicode进行编码的。操作统一，存储或传输的时候就可以使用不同的编码。
	unicode常用的是2个字节表示一个字符，所以ASCII转化为unicode时只需要在前面加八个0。
	如果对于一个英文比较多的文件，使用unicode编码存储的话，会造成一倍的空间浪费。所以出现了unicode的进阶版本UTF-8编码，utf-8是一种可变长的编码。
	在utf-8中，英文字母编码成1个字节，汉字通常是3个字节。ASCII可以看做utf-8的一部分。
	当需要存储或者传输的时候，将转化为utf-8编码。
	(2)在Python3中，字符串是以Unicode来编码的，所以字符串支持多语言。
	   2个有用的函数：ord（）：获取字符的整数表示，chr（）：将编码转化为对应字符
	(3)unicode编码，一个字符对应若干个字符。当存储或者传输时，需要把字符串转换为以字节为单位的bytes。python对bytes类型的数据用带前缀b来表示。也就是一个编码转换，将unicode编码的变量转换成其它编码格式。
		x = b“abc”    b”adc” 和“abc”是不一样的，bytes中的每个字符占用一个字节（根据不同的编码会用差别）。
                       Python 3最重要的新特性大概要算是对文本和二进制数据作了更为清晰的区分。文本总是Unicode，由str类型表示，二进制数据则由bytes类型表示。Python 3不会以任意隐式的方式混用str和bytes，正是这使得两者的区分特别清晰。你不能拼接字符串和字节包，也无法在字节包里搜索字符串（反之亦然），也不能将字符串传入参数为字节包的函数（反之亦然）。这是件好事。
不管怎样，字符串和字节包之间的界线是必然的，下面的图解非常重要，务请牢记于心：
字符串可以编码成字节包，而字节包可以解码成字符串。
>>>'€20'.encode('utf-8')
b'\xe2\x82\xac20'
>>> b'\xe2\x82\xac20'.decode('utf-8')
'€20'
>>> "我是".encode("utf-8")  
b'\xe6\x88\x91\xe6\x98\xaf' 
>>> "我是".encode("gbk")    
b'\xce\xd2\xca\xc7'  
     函数：len()获取字符串包含多少个字符。  
	python文本中的，# -*-coding： utf-8 -*-   用于说明读取文件的时候使用utf-8编码格式读取，并不是说明你的文件就是utf-8编的，文件的编码格式取决于编辑器的编码方式。
9、格式化
	python中的格式化输出和C语言中一样，用%实现。
	>>> "hello,%s." % "world!"         
	'hello,world!.'                    
	>>> "hello,%s%d." % ("world!",123) 
	'hello,world!123.'                 
10、复杂数据类型
	（1）list：列表，有序的集合，可以随时删除和添加其中的元素
		>>> classmates = ["asd","qwe","rty","ghj"] 
		>>> classmates                             
		['asd', 'qwe', 'rty', 'ghj']
		len()函数可以获取list元素的个数。
		可以想数组一样去操作list，索引也是从0开始。与C语言中数组不同的是，list中的成员的类型可以是不同的类型并且它的长度是可以动态改变的，而C语言数组的长度是定义的时候指定的。               
		索引-1是最后一个元素的索引，以此类推-2是倒数第二个，。。。。。。
		给list末尾追加元素，listname.append()
		给指定位置添加，listname.insert(1,””)
		删除末尾元素，listname.pop()
		删除指定位置元素，listname.pop(i)
		list可以嵌套，此时可以当作二维数组处理
	（2）tuple：元组，和list非常类似，但是tuple一旦初始化，就不能修改
		name = （“”，“”，...）
		注：定义一个元素的tuple，t = (1),这时t不是tuple而是数1，因为此时（）当作数学公式中的小括号。所以要定义只有一个元素的tuple，要加，号，即t = (1,)
		tuple中可以嵌套list，嵌套的list的值可以变，因为改变list并未改变tuple，tuple指向的内容是list地址的首地址
	（3）dictionary：字典，一种无序的集合，键值对存储
		d = {“asd”:99,”qwe”:34,”asf”:89}
		变量d就是dict类型，而“asd”、“qwe”都是键，99、34、89都是值
		引用字典中的元素时，使用键引用，如：d[“asd”]
		get（）函数，判断key是否存在，如：d.get(“asd”,[不存在时返回的值，可以省略])，不存在时，默认返回None（交互模式不显示），
		pop（key）函数，删除一个键值对
		注：dict内部存放的顺序和key的顺序无关。key是不可变对象，因为dict是靠key去获取数值，通过key去计算值的存储位置（哈希算法）
	（4）set：是一组key的集合，但不储存value。key不能重复，所以，set中没有重复的值。也是无序的。无序、无重复元素的集合，两个set可以作交集（&）和并集（|）
		创建set，需要使用一个list作为输入集合
		s = set(list)
		如果list中有重复元素，则set会自动过滤重复元素，只保留一个。
		add（key）添加元素到set中；
		remove（key）移除元素
11、语句
	（1）条件判断
		if 条件 :
			语句
		else：
			语句
		或者：
		if 条件 :
			语句
		elif：
			语句
		else:
			语句
		注：Python条件判断语句中的条件，可以简写为：if x：
		x只要是非零数值、非空字符串、非空list等，判断就为True
	（2）for...in循环
		依次把list或tuple中的元素迭代出来。
		for x in name：
			语句
		把name中的每个元素依次带入变量x中，然后执行语句		
		range（i）函数，用于生成从0开始小于i的整数序列，通过list（）函数转换为list类型。
	（3）while循环
		while 条件：
			语句
	（4）break语句
		提前退出循环
	（5）continue语句
		跳出当次循环，进入下一次循环。
12、可变对象和不可变对象
知识点：python中，万物皆对象。
　　　python中不存在所谓的传值调用（C语言），一切传递的都是对象的引用，也可以认为是传址。
一、可变对象和不可变对象
Python在heap中分配的对象分成两类：可变对象和不可变对象。所谓可变对象是指，对象的内容可变，而不可变对象是指对象内容不可变。
不可变（immutable）：int、字符串(string)、float、（数值型number）、元组（tuple)
可变（mutable）：字典型(dictionary)、列表型(list)
i = 73

从上图可知，不可变对象的特征没有变，变的只是创建了新对象，改变了变量的对象引用。
　看一个例子（例2）
>>>x = 1
>>>y = 1
>>>x = 1
>>> x is y
True
>>>y is z
True
　　如上所示，因为整数为不可变，x,y,z在内存中均指向一个值为1的内存地址，也就是说，x,y,z均指向的是同一个地址，值得注意的是，整形来说，目前仅支持(-1,100)。
总结一下，不可变对象的优缺点。
　　　　优点是，这样可以减少重复的值对内存空间的占用。
　　　　缺点呢，如例1所示，我要修改这个变量绑定的值，如果内存中没用存在该值的内存块，那么必须重新开辟一块内存，把新地址与变量名绑定。而不是修改变量原来指向的内存块的值，这回给执行效率带来一定的降低。
　　下面看一个可变对象的例子（例3）
二、函数参数：
Python函数参数对于可变对象，函数内对参数的改变会影响到原始对象；对于不可变对象，函数内对参数的改变不会影响到原始参数。原因在于：
1、可变对象，参数改变的是可变对象，其内容可以被修改。
2、不可变对象，改变的是函数内变量的指向对象。

